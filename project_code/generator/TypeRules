TypeMap:
    "IntgT" -> Int,
    "BoolT" -> Bool

Program:
    Rule: Top {
        Ants:
            "s": Stm
        Csqnt:
            "Prog s": Prog
    }

Expressions:
    Rule: Equal {
        Ants:
            "a": Int,
            "b": Int
        Csqnt:
            "Eql a b": Bool
    };

    Rule: LessThan {
        Ants:
            "a": Int,
            "b": Int
        Csqnt:
            "Lsth a b": Bool
    };

    Rule: Add {
        Ants:
            "a": Int,
            "b": Int
        Csqnt:
            "Plus a b": Int
    };

    Rule: Or {
        Ants:
            "a": Bool,
            "b": Bool
        Csqnt:
            "Or a b": Bool
    };

    Rule: Mult {
        Ants:
            "a": Int,
            "b": Int
        Csqnt:
            "Mult a b": Int
    };

    Rule: And {
        Ants:
            "a": Bool,
            "b": Bool
        Csqnt:
            "And a b": Bool
    };
    
    Rule: Negate {
        Ants:
            "a": Int,
        Csqnt:
            "Negt a": Int
    };

    Rule: Not {
        Ants:
            "a": Bool,
        Csqnt:
            "Not a": Bool
    };

    Rule: True {
        Ants:
        Csqnt:
            "TruV": Bool
    };

    Rule: False {
        Ants:
        Csqnt:
            "FlsV": Bool
    };
    
    Rule: IntVal {
        Ants:
        Csqnt:
            "Intg a": Int
    };

    
Statements:
    Rule: Skip {
        Ants:
        Csqnt:
            "Skip": Stm
    };
    
    Rule: Print {
        Ants:
            "e": Int,
        Csqnt:
            "Prnt e": Stm
    };

    Rule: IfThenElse {
        Ants:
            "p": Bool,
            "s": Stm,
            "t": Stm
        Csqnt:
            "Ifte p s t": Stm
    };

    Rule: While {
        Ants:
            "p": Bool,
            "s": Stm
        Csqnt:
            "Iter p s": Stm
    };

    Rule: Seqn {
        Ants:
            "s1": Stm,
            "s2": Stm
        Csqnt:
            "Seqn s1 s2": Stm
    }
