

module AbsTsl where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Spec
    = SpecExpr [TypeMapping] TypeRule [TypeRule]
    | SpecExprStm [TypeMapping] TypeRule [TypeRule] [TypeRule]
  deriving (Eq, Ord, Show, Read)

data TypeMapping = TMap String TSLType
  deriving (Eq, Ord, Show, Read)

data TypeRule
    = RuleSC Ident [Judgement] String Judgement
    | RuleNoSC Ident [Judgement] Judgement
  deriving (Eq, Ord, Show, Read)

data Judgement = Jmnt String TSLType
  deriving (Eq, Ord, Show, Read)

data TSLType
    = TInt
    | TLong
    | TFloat
    | TDouble
    | TChar
    | TString
    | TBool
    | TStm
    | TProg
  deriving (Eq, Ord, Show, Read)

